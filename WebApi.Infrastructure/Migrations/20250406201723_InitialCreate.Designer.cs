// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Infrastructure.Context;

#nullable disable

namespace WebApi.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250406201723_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApi.Entities.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apartment")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("IdCountry")
                        .HasColumnType("int");

                    b.Property<int>("IdDistrict")
                        .HasColumnType("int");

                    b.Property<int>("IdMunicipality")
                        .HasColumnType("int");

                    b.Property<int>("IdNeighborhood")
                        .HasColumnType("int");

                    b.Property<int>("IdProvince")
                        .HasColumnType("int");

                    b.Property<int>("IdSector")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NoHouse")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("References")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.HasIndex("IdDistrict");

                    b.HasIndex("IdMunicipality");

                    b.HasIndex("IdNeighborhood");

                    b.HasIndex("IdProvince");

                    b.HasIndex("IdSector");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("WebApi.Entities.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WebApi.Entities.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdMunicipality")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("IdMunicipality");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("WebApi.Entities.Models.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdProvince")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("IdProvince");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("WebApi.Entities.Models.Neighborhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdSector")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("IdSector");

                    b.ToTable("Neighborhoods");
                });

            modelBuilder.Entity("WebApi.Entities.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdCountry")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("WebApi.Entities.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdDistrict")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("IdDistrict");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("WebApi.Entities.Models.Address", b =>
                {
                    b.HasOne("WebApi.Entities.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("IdDistrict")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Models.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("IdMunicipality")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Models.Neighborhood", "Neighborhood")
                        .WithMany("Addresses")
                        .HasForeignKey("IdNeighborhood")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("IdProvince")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApi.Entities.Models.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("IdSector")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("Municipality");

                    b.Navigation("Neighborhood");

                    b.Navigation("Province");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("WebApi.Entities.Models.District", b =>
                {
                    b.HasOne("WebApi.Entities.Models.Municipality", "Municipality")
                        .WithMany("Districts")
                        .HasForeignKey("IdMunicipality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("WebApi.Entities.Models.Municipality", b =>
                {
                    b.HasOne("WebApi.Entities.Models.Province", "Province")
                        .WithMany("Municipalities")
                        .HasForeignKey("IdProvince")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("WebApi.Entities.Models.Neighborhood", b =>
                {
                    b.HasOne("WebApi.Entities.Models.Sector", "Sector")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("IdSector")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("WebApi.Entities.Models.Province", b =>
                {
                    b.HasOne("WebApi.Entities.Models.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WebApi.Entities.Models.Sector", b =>
                {
                    b.HasOne("WebApi.Entities.Models.District", "District")
                        .WithMany("Sectors")
                        .HasForeignKey("IdDistrict")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("WebApi.Entities.Models.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("WebApi.Entities.Models.District", b =>
                {
                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("WebApi.Entities.Models.Municipality", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("WebApi.Entities.Models.Neighborhood", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("WebApi.Entities.Models.Province", b =>
                {
                    b.Navigation("Municipalities");
                });

            modelBuilder.Entity("WebApi.Entities.Models.Sector", b =>
                {
                    b.Navigation("Neighborhoods");
                });
#pragma warning restore 612, 618
        }
    }
}
